Technology is often seen as a linear development, towards an ideal of seamless expression, where technology efficiently brings ideas into the world. However, much work in electronic music picks at those seams, stripping back interface design to reveal the systems within. At this moment, we enjoy huge resurgence of interest in modular synthesis, and more generally in maker culture, with great emphasis on revealing how things understanding work, and how they can be repurposed or rebuilt. In electronic music, the state of the art is now not necessarily in the 'fastest' machines, but in the most 'hackable' (Zappi and McPherson, 2014).

Live coding, as a musical practice, has emerged into electronic music culture over the past 16 years. Its history is complicated by emerging from at least three places at once; from the SuperCollider community following the release of version 3.0, where language was decoupled from synthesis, providing grounds for the 'Just-in-Time' environment (JITLib) by Julian Rohrhuber. It also emerged from the work of Ge Wang on ChucK, supporting 'on-the-fly' programming (Wang and Cook, 2003). A third location was the band Slub (of which I am a member), who from the start worked towards writing code while people danced to it, realised through the production of various handmade livecoding environments including MAP/MSG, Pure Events, feedback.pl, Fluxus and Tidal. There were many further precedents, but the exact chronology of these developments is perhaps less interesting than the fact that this burst of activity took place over a few years, from the year 2000. It seems that at this time, there was something 'in the air', a faultline running through assumptions of how software should be made and used in the arts.

That live coding arose from several unconnected places at once hints at technological determinism. But what could this mean, where the artists themselves are creating the technology, and where that technology appears to be almost Luddite in unravelling modern interface paradigms? Furthermore, is it possible to break out of a linear perspective of technology entirely, looking at ancient patterning systems such as the warp weighted loom, to reappraise the role of the human in digital technology?
Through reflection on participating in the AHRC Weaving Codes, Coding Weaves project, and on sixteen years of live coding practice, as well as surveying members from the early live coding community, the author both explores what a history of Live Coding might look like, and how live coding practice challenges the history of computation in general.

Collins, N. and A. McLean (2014). Algorave: A survey of the history, aesthetics and technology of live performance of algorithmic electronic dance music. In Proceedings of the International Conference on New Interfaces for Musical Expression.

Zappi, 	V., and A. McPherson. "Design and use of a hackable digital instrument." (2014).
Wang, Ge, and Perry R. Cook. "ChucK: A concurrent, on-the-fly audio programming language." In Proceedings of International Computer Music Conference, pp. 219-226. 2003.

Rohrhuber, Julian, Alberto de Campo, and Renate Wieser. "Algorithms today notes on language design for just in time programming." context 1 (2005): 291.


Ge: For me, I started working on ChucK in 2002 (shortly after I got to Princeton as as PhD student), partially with the idea to make it an "on-the-fly" language -- reflecting both a personal preference to make things real-time when possible, and an aesthetic curiosity about programming languages that can be used in a "build it as you run it" manner. The temporal determinism and concurrency mechanisms also came about as explorations into designing ChucK, somewhat independently of on-the-fly, although they certainly influence how one live codes in ChucK.  The interest in real-time (and an "hyper" real-time awareness that seems to accompany live programming) can be traced to undergrad where I wrote a lot of real-time graphics and some music/audio software, which in turn may have been from engaging with both musical instruments and video games (two very real-time interactions) since a young age.

